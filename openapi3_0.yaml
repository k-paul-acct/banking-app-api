openapi: 3.0.3
info:
  title: Banking App API
  version: 1.0.0
tags:
  - name: auth
    description: Everything about authentication and authorization
  - name: employee
    description: Operations about employee
  - name: account
    description: Operations with employee bank account
  - name: cashback
    description: Cashback overview
  - name: common
    description: Generally available endpoint
  - name: admin
    description: Only admins allowed endpoints
paths:
  /api/regions:
    get:
      tags:
        - common
      summary: All available regions
      description: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
    post:
      tags:
        - admin
      summary: Add region
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          description: validation error
        '401':
          description: unauthorized
        '403':
          description: not allowed
        '409':
          description: conflict occured
  /api/regions/{code}:
    get:
      tags:
        - common
      summary: Get region by code
      description: ''
      parameters:
        - in: path
          name: code
          description: Region code
          required: true
          schema:
            type: number
            example: 45
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '404':
          description: not found
    delete:
      tags:
        - admin
      summary: Delete region by code
      description: ''
      parameters:
        - in: path
          name: code
          description: Region code
          required: true
          schema:
            type: number
            example: 45
      responses:
        '200':
          description: successful operation
        '401':
          description: unauthorized
        '403':
          description: not allowed
        '404':
          description: not found
  /auth/signup:
    post:
      tags:
        - auth
      summary: Register user
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/SignUp'
      responses:
        '200':
          description: successful operation
        '400':
          description: validation error
  /auth/signin:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/SignIn'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied
  /auth/signout:
    post:
      tags:
        - auth
      summary: Logs out current logged in user session
      description: ''
      parameters: []
      responses:
        '200':
          description: successful operation
  /employee/{id}:
    get:
      tags:
        - employee
      summary: Get employee by id
      description: ''
      parameters:
        - name: id
          in: path
          description: 'Employee ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid id supplied
        '404':
          description: Employee not found
    put:
      tags:
        - employee
      summary: Update employee data
      description: ''
      parameters:
        - name: id
          in: path
          description: Employee ID to update
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateEmployee'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid data supplied
        '404':
          description: Employee not found
    delete:
      tags:
        - employee
      summary: Delete employee
      parameters:
        - name: id
          in: path
          description: Employee ID to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Employee not found
  /cashback/types:
    get:
      tags:
        - cashback
      description: ''
      responses:
        '200':
          description: successful operation
  /account/{id}:
    get:
      tags:
        - account
      summary: Main page info
      description: ''
      parameters:
        - name: id
          in: path
          description: 'Employee ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid id supplied
        '404':
          description: Employee not found
  /account/{id}/transactions:
    get:
      tags:
        - account
      summary: Account transactions info
      description: ''
      parameters:
        - name: id
          in: path
          description: 'Employee ID'
          required: true
          schema:
            type: string
        - name: date-from
          in: path
          description: Date start filter
          required: true
          schema:
            type: string
            description: ISO 8601 format
        - name: date-to
          in: path
          description: Date end filter
          required: true
          schema:
            type: string
            description: ISO 8601 format
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  dateFrom:
                    type: string
                  dateTo:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid data supplied
        '404':
          description: Employee not found
  /account/transfer:
    post:
      tags:
        - account
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/Transfer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid data supplied
components:
  schemas:
    Region:
      type: object
      properties:
        code:
          type: number
          description: Region code from Russian Classification on Objects of
            Administrative Division
          example: 45
        regionName:
          type: string
          description: Region name in Russian
          example: Москва
    Transaction:
      type: object
      properties:
        amount:
          type: number
          example: -123.123
        transactionType:
          type: string
          example: payment
        cashback:
          type: number
          example: 12
        credentials:
          type: string
          example: Grocery Store
        timestamp:
          type: string
          description: ISO 8601 datetime format
    Employee:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        role:
          type: string
        region:
          type: string
          example: RU-MOS
          description: ISO 3166-2 format
        dateOfBirth:
          type: string
          example: '2022-04-06'
          description: ISO 8601 format
    Account:
      type: object
      properties:
        id:
          type: string
          description: Employee ID
          example: 'ea415563-34a6-4958-a0ce-0afe57cc81f8'
        balance:
          type: number
          description: Employee bank account balance
          example: 123.456
        cardNumber:
          type: string
          description: Employee bank card number
          example: '1234 1234 1234 1234'
  requestBodies:
    Transfer:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              accountId:
                type: string
                description: UUID
              amount:
                type: number
                example: 123.12
              recipientCardNumber:
                type: string
                example: 1234 1234 1234 1234
    SignIn:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              phone:
                type: string
                description: Phone number in format '+7AAABBBCCDD'
              password:
                type: string
                format: password
    SignUp:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              secondName:
                type: string
              patronymic:
                type: string
              dateOfBirth:
                type: string
                format: date
              sex:
                type: string
                enum:
                  - 'male'
                  - 'female'
              phone:
                type: string
                description: Phone number in format '+7AAABBBCCDD'
              passportNumber:
                type: string
              password:
                type: string
              passwordConfirmation:
                type: string
              region:
                type: string
                description: Region enum value from another endpoint.
    CreateEmployee:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              login:
                type: string
                example: theUser
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: James
              email:
                type: string
                example: john@email.com
              password:
                type: string
                example: '12345'
              phone:
                type: string
                example: '12345'
              region:
                type: string
                example: RU-MOS
              dateOfBirth:
                type: string
    UpdateEmployee:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: James
              email:
                type: string
                example: john@email.com
              phone:
                type: string
                example: '12345'
  securitySchemes:
    apiKey:
      type: apiKey
      name: x-api-key
      in: header
    cookieAuth:
      type: apiKey
      in: cookie
      name: sign
